Given a list of integers S and a target number k, write a function that returns a subset of S that adds up to k. If such a subset cannot be made, then return null.

Integers can appear more than once in the list. You may assume all numbers in the list are positive.

For example, given S = [12, 1, 61, 5, 9, 2] and k = 24, return [12, 9, 2, 1] since it sums up to 24.



static void xuLy(int[] arr,int k,int position)
	{
		String s="";
		k-=arr[position];
		s+=String.valueOf(arr[position])+"\t";
		for(int i=position+1;i<arr.length;i++)
		{
			if(arr[i]>k)
				continue;
			else
			{
				if(k-arr[i]<0)
					continue;
				k-=arr[i];
				s=s+String.valueOf(arr[i])+"\t ";
				if(k<0)
				{
					break;
				}
				if(k==0)
				{
					System.out.print(s);
					break;
				}
			}
		}
		
		
	}
	public static void main(String[] args) {
		int[] arr = { 12, 1, 61, 5, 9, 2 };
		int k = 24;
		for (int i = 0; i < arr.length - 1; i++) {
			for (int j = i + 1; j < arr.length; j++) {
				if (arr[i] < arr[j]) {
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] > k)
				continue;
			if (arr[i] == k) {
				System.out.println(arr[i]);
				continue;
			}
			if(arr[i]<k)
			{
				xuLy(arr, k, i);
			}
		}
	}

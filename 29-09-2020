Given an array of numbers, find the maximum sum of any contiguous subarray of the array.

For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, since we would take elements 42, 14, -5, and 86.

Given the array [-5, -1, -8, -9], the maximum sum would be 0, since we would not take any elements.




Solution:
static int sumElenment=0;
    static int sumMax=0;
    static List<Integer>lstElement=new ArrayList<Integer>();
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[]arr= {34, -50, 42, 14, -5, 86};
		int countMinus = 0;
		int start=0,end=0;
		for(int i=0;i<arr.length;i++)
		{
			sumElenment+=arr[i];
			if(arr[i]<0)
				++countMinus;
		}
		if(countMinus==arr.length-1)
			sumMax=0;
		else
		{
			sumMax=sumElenment;
			for(int i=0;i<arr.length-1;i++)
			{
				sumElenment=arr[i];
				for(int j=i+1;j<arr.length;j++)
				{
					sumElenment+=arr[j];
					if(sumElenment>sumMax)
					{
						start=i;
						end=j;
						sumMax=sumElenment;
					}
				}
			}
		}
		for(int i=start;i<=end;i++)
			System.out.println(arr[i]);
	}
